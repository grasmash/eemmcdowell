<?php
/**
 * @file
 * Views TimelineJS API, theming, libraries, etc.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_library_info_build().
 */
function views_timelinejs_library_info_build() {
  //global $base_url;
  $libraries = [];

  // Create a library for each TimelineJS3 alternate font set.
  foreach (array_keys(_views_timelinejs_list_font_sets()) as $set) {
    $libraries['timelinejs.' . $set . '.cdn'] = [
      'remote' => 'https://github.com/NUKnightLab/TimelineJS3',
      'version' => '3.3.15',
      'license' => [
        'name' => 'MPL',
        'url' => 'https://github.com/NUKnightLab/TimelineJS3/blob/master/LICENSE',
        'gpl-compatible' => FALSE,
      ],
      'css' => [
        'theme' => [
          'https://cdn.knightlab.com/libs/timeline3/latest/css/fonts/font.' . $set . '.css' => ['type' => 'external'],
        ],
      ],
    ];
    $libraries['timelinejs.' . $set . '.local'] = [
      'remote' => 'https://github.com/NUKnightLab/TimelineJS3',
      'version' => '3.3.15',
      'license' => [
        'name' => 'MPL',
        'url' => 'https://github.com/NUKnightLab/TimelineJS3/blob/master/LICENSE',
        'gpl-compatible' => FALSE,
      ],
      'css' => [
        'theme' => [
          '/libraries/TimelineJS3/compiled/css/fonts/font.' . $set . '.css' => [],
        ],
      ],
    ];
  }

  return $libraries;
}

/**
 * Returns an array of font set options that are supported by TimelineJS3.
 *
 * @return array
 *   An array of font set names, keyed by the name section of the set's CSS
 *   filename, i.e. 'font.set-name.css'.
 */
function _views_timelinejs_list_font_sets() {
  return array(
    'abril-droidsans' => 'Abril Fatface & Droid Sans',
    'amatic-andika' => 'Amatic & Andika',
    'bevan-pontanosans' => 'Bevan & Pontano Sans',
    'bitter-raleway' => 'Bitter & Raleway',
    'clicker-garamond' => 'Clicker & Garamond',
    'dancing-ledger' => 'Dancing & Ledger',
    'default' => 'Default',
    'fjalla-average' => 'Fjalla & Average',
    'georgia-helvetica' => 'Georgia & Helvetica',
    'knightlab' => 'Knight Lab',
    'lustria-lato' => 'Lustria Lato',
    'medula-lato' => 'Medula One & Lato',
    'oldstandard' => 'Old Standard',
    'opensans-gentiumbook' => 'Open Sans & Gentium Book Basic',
    'playfair-faunaone' => 'Playfair & Fauna One',
    'playfair' => 'Playfair SC & Playfair',
    'pt' => 'PT Sans / PT Serif / PT Sans Narrow',
    'roboto-megrim' => 'Roboto Slab & Megrim',
    'rufina-sintony' => 'Rufina & Sintony',
    'ubuntu' => 'Ubuntu',
    'unicaone-vollkorn' => 'Unica One & Vollkorn',
  );
}

/**
 * Implements hook_help().
 */
function views_timelinejs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Help for the settings form.
    case 'views_timelinejs.admin':
      return '<p>' . t('Configure how the Views TimelineJS plugin behaves on the site. Select whether to use a CDN or serve the library locally.') . '</p>';
  }
}

/**
 * Prepares variables for the TimelineJS style template.
 *
 * Default template: views-timelinejs-view-timelinejs.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A ViewExecutable object.
 *   - rows: The raw row data.
 *   - timeline_options: TimelineJS presentation options.
 *   - timeline_font: The name of a TimelineJS font set.
 */
function template_preprocess_views_timelinejs_view_timelinejs(&$vars) {
  $config = \Drupal::config('views_timelinejs.settings');
  $library_location = $config->get('library_location');
  $view = $vars['view'];

  // Set a unique id attribute for the timeline embed div.  Also set a width and
  // height for the div.  This is required for proper styling of the timeline.
  // See https://timeline.knightlab.com/docs/instantiate-a-timeline.html.
  $id = Html::getId('timelinejs_' . $view->storage->id() . '_' . $view->current_display);
  $style = 'width: ' . $vars['options']['timeline_options']['width'] . '; height: ' . $vars['options']['timeline_options']['height'] . ';';
  $vars['attributes'] = new Attribute(['id' => $id, 'style' => $style]);

  // Load required libraries and styles.
  $vars['#attached']['library'][] = 'views_timelinejs/timelinejs.' . $library_location;
  $vars['#attached']['library'][] = 'views_timelinejs/create_timeline';
  $vars['#attached']['drupalSettings']['TimelineJS'][] = [
    'options' => _sanitize_timeline_options($vars['options']['timeline_options']),
    'source' => $vars['rows'],
    'embed_id' => $id,
    'processed' => FALSE,
  ];

  // Add alternate font CSS.
  if ($vars['options']['timeline_font']) {
    $vars['#attached']['library'][] = 'views_timelinejs/timelinejs.' . $vars['options']['timeline_font'] . '.' . $library_location;
  }
}

/**
 * Sanitizes the timeline options.
 */
function _sanitize_timeline_options($options) {
  // Sanitize the options.
  $options = array_map(['Drupal\Component\Utility\Html', 'escape'], $options);
  // Remove empty values from the options before returning.
  return array_filter($options);
}
